// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer_service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResponseType struct {
	Person               *Person  `protobuf:"bytes,1,opt,name=person,proto3" json:"person,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseType) Reset()         { *m = ResponseType{} }
func (m *ResponseType) String() string { return proto.CompactTextString(m) }
func (*ResponseType) ProtoMessage()    {}
func (*ResponseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a047699a06ac5, []int{0}
}

func (m *ResponseType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseType.Unmarshal(m, b)
}
func (m *ResponseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseType.Marshal(b, m, deterministic)
}
func (m *ResponseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseType.Merge(m, src)
}
func (m *ResponseType) XXX_Size() int {
	return xxx_messageInfo_ResponseType.Size(m)
}
func (m *ResponseType) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseType.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseType proto.InternalMessageInfo

func (m *ResponseType) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

type RequestType struct {
	Person               *Person  `protobuf:"bytes,1,opt,name=person,proto3" json:"person,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestType) Reset()         { *m = RequestType{} }
func (m *RequestType) String() string { return proto.CompactTextString(m) }
func (*RequestType) ProtoMessage()    {}
func (*RequestType) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a047699a06ac5, []int{1}
}

func (m *RequestType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestType.Unmarshal(m, b)
}
func (m *RequestType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestType.Marshal(b, m, deterministic)
}
func (m *RequestType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestType.Merge(m, src)
}
func (m *RequestType) XXX_Size() int {
	return xxx_messageInfo_RequestType.Size(m)
}
func (m *RequestType) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestType.DiscardUnknown(m)
}

var xxx_messageInfo_RequestType proto.InternalMessageInfo

func (m *RequestType) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

type Person struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a047699a06ac5, []int{2}
}

func (m *Person) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person.Unmarshal(m, b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person.Marshal(b, m, deterministic)
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return xxx_messageInfo_Person.Size(m)
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func init() {
	proto.RegisterType((*ResponseType)(nil), "proto.ResponseType")
	proto.RegisterType((*RequestType)(nil), "proto.RequestType")
	proto.RegisterType((*Person)(nil), "proto.Person")
}

func init() { proto.RegisterFile("customer_service.proto", fileDescriptor_512a047699a06ac5) }

var fileDescriptor_512a047699a06ac5 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x9b, 0xd4, 0x06, 0x3a, 0x89, 0x7f, 0x18, 0x41, 0x42, 0x4f, 0x25, 0x20, 0xf4, 0x54,
	0xb4, 0xa6, 0x57, 0x41, 0x14, 0xbc, 0x78, 0x28, 0xab, 0x9e, 0x25, 0x76, 0x1f, 0x25, 0x60, 0xb3,
	0xeb, 0xee, 0x46, 0xf0, 0x5b, 0xfa, 0x91, 0xa4, 0x9b, 0xa0, 0xed, 0x71, 0x4f, 0x3b, 0xbc, 0x79,
	0xbf, 0xd9, 0x79, 0x43, 0x17, 0xeb, 0xd6, 0x3a, 0xb5, 0x85, 0x79, 0xb3, 0x30, 0x5f, 0xf5, 0x1a,
	0x73, 0x6d, 0x94, 0x53, 0x3c, 0xf2, 0x4f, 0xb1, 0xa4, 0x4c, 0xc0, 0x6a, 0xd5, 0x58, 0xbc, 0x7c,
	0x6b, 0xf0, 0x25, 0x25, 0x1a, 0xc6, 0xaa, 0x26, 0x8f, 0xa6, 0xd1, 0x2c, 0x5d, 0x1c, 0x77, 0xf6,
	0xf9, 0xca, 0x8b, 0xa2, 0x6f, 0x16, 0x25, 0xa5, 0x02, 0x9f, 0x2d, 0xac, 0x0b, 0xa1, 0x6e, 0x29,
	0xe9, 0x14, 0x3e, 0xa1, 0xb8, 0x96, 0xde, 0x3c, 0x12, 0x71, 0x2d, 0x99, 0xe9, 0xa8, 0xa9, 0xb6,
	0xc8, 0xe3, 0x69, 0x34, 0x1b, 0x0b, 0x5f, 0xf3, 0x19, 0x0d, 0xab, 0x0d, 0xf2, 0xa1, 0x37, 0xed,
	0xca, 0xc5, 0x4f, 0x4c, 0xa7, 0xf7, 0x7d, 0x9c, 0xe7, 0x2e, 0x0d, 0x97, 0x94, 0x3e, 0xd5, 0xd6,
	0x75, 0x73, 0x2d, 0x73, 0xff, 0xf3, 0xde, 0x76, 0x93, 0xc3, 0x6d, 0x8a, 0xc1, 0x55, 0xc4, 0x4b,
	0xca, 0x56, 0xad, 0xd9, 0x20, 0x10, 0xbb, 0xa6, 0xf1, 0x9d, 0x94, 0x7d, 0x86, 0xc3, 0xfe, 0xe4,
	0xfc, 0x6f, 0xc4, 0xff, 0x39, 0x8b, 0xc1, 0x0e, 0x79, 0x84, 0x0b, 0x42, 0x4a, 0xca, 0x5e, 0xb5,
	0xac, 0x1c, 0x42, 0xa9, 0x07, 0x7c, 0x20, 0x8c, 0x7a, 0x4f, 0xbc, 0x7a, 0xf3, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x7b, 0x53, 0x18, 0x1b, 0x27, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	ListPersons(ctx context.Context, in *RequestType, opts ...grpc.CallOption) (CustomerService_ListPersonsClient, error)
	PurgePersons(ctx context.Context, in *RequestType, opts ...grpc.CallOption) (CustomerService_PurgePersonsClient, error)
	AddPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*ResponseType, error)
	GetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*ResponseType, error)
	UpdatePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*ResponseType, error)
	DeletePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*ResponseType, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) ListPersons(ctx context.Context, in *RequestType, opts ...grpc.CallOption) (CustomerService_ListPersonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CustomerService_serviceDesc.Streams[0], "/proto.CustomerService/ListPersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerServiceListPersonsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerService_ListPersonsClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type customerServiceListPersonsClient struct {
	grpc.ClientStream
}

func (x *customerServiceListPersonsClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customerServiceClient) PurgePersons(ctx context.Context, in *RequestType, opts ...grpc.CallOption) (CustomerService_PurgePersonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CustomerService_serviceDesc.Streams[1], "/proto.CustomerService/PurgePersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerServicePurgePersonsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerService_PurgePersonsClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type customerServicePurgePersonsClient struct {
	grpc.ClientStream
}

func (x *customerServicePurgePersonsClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customerServiceClient) AddPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*ResponseType, error) {
	out := new(ResponseType)
	err := c.cc.Invoke(ctx, "/proto.CustomerService/AddPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*ResponseType, error) {
	out := new(ResponseType)
	err := c.cc.Invoke(ctx, "/proto.CustomerService/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdatePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*ResponseType, error) {
	out := new(ResponseType)
	err := c.cc.Invoke(ctx, "/proto.CustomerService/UpdatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeletePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*ResponseType, error) {
	out := new(ResponseType)
	err := c.cc.Invoke(ctx, "/proto.CustomerService/DeletePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	ListPersons(*RequestType, CustomerService_ListPersonsServer) error
	PurgePersons(*RequestType, CustomerService_PurgePersonsServer) error
	AddPerson(context.Context, *Person) (*ResponseType, error)
	GetPerson(context.Context, *Person) (*ResponseType, error)
	UpdatePerson(context.Context, *Person) (*ResponseType, error)
	DeletePerson(context.Context, *Person) (*ResponseType, error)
}

// UnimplementedCustomerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (*UnimplementedCustomerServiceServer) ListPersons(req *RequestType, srv CustomerService_ListPersonsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPersons not implemented")
}
func (*UnimplementedCustomerServiceServer) PurgePersons(req *RequestType, srv CustomerService_PurgePersonsServer) error {
	return status.Errorf(codes.Unimplemented, "method PurgePersons not implemented")
}
func (*UnimplementedCustomerServiceServer) AddPerson(ctx context.Context, req *Person) (*ResponseType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (*UnimplementedCustomerServiceServer) GetPerson(ctx context.Context, req *Person) (*ResponseType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (*UnimplementedCustomerServiceServer) UpdatePerson(ctx context.Context, req *Person) (*ResponseType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerson not implemented")
}
func (*UnimplementedCustomerServiceServer) DeletePerson(ctx context.Context, req *Person) (*ResponseType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerson not implemented")
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_ListPersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestType)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerServiceServer).ListPersons(m, &customerServiceListPersonsServer{stream})
}

type CustomerService_ListPersonsServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type customerServiceListPersonsServer struct {
	grpc.ServerStream
}

func (x *customerServiceListPersonsServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func _CustomerService_PurgePersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestType)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerServiceServer).PurgePersons(m, &customerServicePurgePersonsServer{stream})
}

type CustomerService_PurgePersonsServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type customerServicePurgePersonsServer struct {
	grpc.ServerStream
}

func (x *customerServicePurgePersonsServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func _CustomerService_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CustomerService/AddPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CustomerService/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CustomerService/UpdatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdatePerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeletePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeletePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CustomerService/DeletePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeletePerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPerson",
			Handler:    _CustomerService_AddPerson_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _CustomerService_GetPerson_Handler,
		},
		{
			MethodName: "UpdatePerson",
			Handler:    _CustomerService_UpdatePerson_Handler,
		},
		{
			MethodName: "DeletePerson",
			Handler:    _CustomerService_DeletePerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPersons",
			Handler:       _CustomerService_ListPersons_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PurgePersons",
			Handler:       _CustomerService_PurgePersons_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "customer_service.proto",
}
